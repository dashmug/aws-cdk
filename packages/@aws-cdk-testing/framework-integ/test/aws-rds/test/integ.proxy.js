"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("aws-cdk-lib/aws-ec2");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const rds = require("aws-cdk-lib/aws-rds");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-rds-proxy');
const vpc = new ec2.Vpc(stack, 'vpc', { maxAzs: 2 });
const dbInstance = new rds.DatabaseInstance(stack, 'dbInstance', {
    engine: rds.DatabaseInstanceEngine.postgres({
        version: rds.PostgresEngineVersion.VER_11_15,
    }),
    instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE3, ec2.InstanceSize.MEDIUM),
    credentials: rds.Credentials.fromUsername('master', {
        excludeCharacters: '"@/\\',
    }),
    vpc,
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
});
new rds.DatabaseProxy(stack, 'dbProxy', {
    borrowTimeout: cdk.Duration.seconds(30),
    maxConnectionsPercent: 50,
    secrets: [dbInstance.secret],
    proxyTarget: rds.ProxyTarget.fromInstance(dbInstance),
    vpc,
});
const cluster = new rds.DatabaseCluster(stack, 'dbCluster', {
    engine: rds.DatabaseClusterEngine.auroraPostgres({
        version: rds.AuroraPostgresEngineVersion.VER_14_5,
    }),
    instanceProps: { vpc },
});
new rds.DatabaseProxy(stack, 'Proxy', {
    dbProxyName: 'cluster-db-proxy',
    proxyTarget: rds.ProxyTarget.fromCluster(cluster),
    secrets: [cluster.secret],
    vpc,
});
new integ.IntegTest(app, 'database-proxy-integ-test', {
    testCases: [stack],
    diffAssets: true,
    cdkCommandOptions: {
        deploy: {
            args: {
                rollback: true,
            },
        },
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUEyQztBQUMzQyxtQ0FBbUM7QUFDbkMsNkNBQTRDO0FBQzVDLG9EQUFvRDtBQUNwRCwyQ0FBMkM7QUFFM0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBRXRELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFckQsTUFBTSxVQUFVLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUMvRCxNQUFNLEVBQUUsR0FBRyxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztRQUMxQyxPQUFPLEVBQUUsR0FBRyxDQUFDLHFCQUFxQixDQUFDLFNBQVM7S0FDN0MsQ0FBQztJQUNGLFlBQVksRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztJQUN4RixXQUFXLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFO1FBQ2xELGlCQUFpQixFQUFFLE9BQU87S0FDM0IsQ0FBQztJQUNGLEdBQUc7SUFDSCxhQUFhLEVBQUUsMkJBQWEsQ0FBQyxPQUFPO0NBQ3JDLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQ3RDLGFBQWEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDdkMscUJBQXFCLEVBQUUsRUFBRTtJQUN6QixPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTyxDQUFDO0lBQzdCLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7SUFDckQsR0FBRztDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFO0lBQzFELE1BQU0sRUFBRSxHQUFHLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDO1FBQy9DLE9BQU8sRUFBRSxHQUFHLENBQUMsMkJBQTJCLENBQUMsUUFBUTtLQUNsRCxDQUFDO0lBQ0YsYUFBYSxFQUFFLEVBQUUsR0FBRyxFQUFFO0NBQ3ZCLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQ3BDLFdBQVcsRUFBRSxrQkFBa0I7SUFDL0IsV0FBVyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUNqRCxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTyxDQUFDO0lBQzFCLEdBQUc7Q0FDSixDQUFDLENBQUM7QUFFSCxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLDJCQUEyQixFQUFFO0lBQ3BELFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNsQixVQUFVLEVBQUUsSUFBSTtJQUNoQixpQkFBaUIsRUFBRTtRQUNqQixNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLElBQUk7YUFDZjtTQUNGO0tBQ0Y7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgUmVtb3ZhbFBvbGljeSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzLWFscGhhJztcbmltcG9ydCAqIGFzIHJkcyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtcmRzJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLXJkcy1wcm94eScpO1xuXG5jb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ3ZwYycsIHsgbWF4QXpzOiAyIH0pO1xuXG5jb25zdCBkYkluc3RhbmNlID0gbmV3IHJkcy5EYXRhYmFzZUluc3RhbmNlKHN0YWNrLCAnZGJJbnN0YW5jZScsIHtcbiAgZW5naW5lOiByZHMuRGF0YWJhc2VJbnN0YW5jZUVuZ2luZS5wb3N0Z3Jlcyh7XG4gICAgdmVyc2lvbjogcmRzLlBvc3RncmVzRW5naW5lVmVyc2lvbi5WRVJfMTFfMTUsXG4gIH0pLFxuICBpbnN0YW5jZVR5cGU6IGVjMi5JbnN0YW5jZVR5cGUub2YoZWMyLkluc3RhbmNlQ2xhc3MuQlVSU1RBQkxFMywgZWMyLkluc3RhbmNlU2l6ZS5NRURJVU0pLFxuICBjcmVkZW50aWFsczogcmRzLkNyZWRlbnRpYWxzLmZyb21Vc2VybmFtZSgnbWFzdGVyJywge1xuICAgIGV4Y2x1ZGVDaGFyYWN0ZXJzOiAnXCJAL1xcXFwnLFxuICB9KSxcbiAgdnBjLFxuICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1ksXG59KTtcblxubmV3IHJkcy5EYXRhYmFzZVByb3h5KHN0YWNrLCAnZGJQcm94eScsIHtcbiAgYm9ycm93VGltZW91dDogY2RrLkR1cmF0aW9uLnNlY29uZHMoMzApLFxuICBtYXhDb25uZWN0aW9uc1BlcmNlbnQ6IDUwLFxuICBzZWNyZXRzOiBbZGJJbnN0YW5jZS5zZWNyZXQhXSxcbiAgcHJveHlUYXJnZXQ6IHJkcy5Qcm94eVRhcmdldC5mcm9tSW5zdGFuY2UoZGJJbnN0YW5jZSksXG4gIHZwYyxcbn0pO1xuXG5jb25zdCBjbHVzdGVyID0gbmV3IHJkcy5EYXRhYmFzZUNsdXN0ZXIoc3RhY2ssICdkYkNsdXN0ZXInLCB7XG4gIGVuZ2luZTogcmRzLkRhdGFiYXNlQ2x1c3RlckVuZ2luZS5hdXJvcmFQb3N0Z3Jlcyh7XG4gICAgdmVyc2lvbjogcmRzLkF1cm9yYVBvc3RncmVzRW5naW5lVmVyc2lvbi5WRVJfMTRfNSxcbiAgfSksXG4gIGluc3RhbmNlUHJvcHM6IHsgdnBjIH0sXG59KTtcblxubmV3IHJkcy5EYXRhYmFzZVByb3h5KHN0YWNrLCAnUHJveHknLCB7XG4gIGRiUHJveHlOYW1lOiAnY2x1c3Rlci1kYi1wcm94eScsXG4gIHByb3h5VGFyZ2V0OiByZHMuUHJveHlUYXJnZXQuZnJvbUNsdXN0ZXIoY2x1c3RlciksXG4gIHNlY3JldHM6IFtjbHVzdGVyLnNlY3JldCFdLFxuICB2cGMsXG59KTtcblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdkYXRhYmFzZS1wcm94eS1pbnRlZy10ZXN0Jywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG4gIGRpZmZBc3NldHM6IHRydWUsXG4gIGNka0NvbW1hbmRPcHRpb25zOiB7XG4gICAgZGVwbG95OiB7XG4gICAgICBhcmdzOiB7XG4gICAgICAgIHJvbGxiYWNrOiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxufSk7XG4iXX0=