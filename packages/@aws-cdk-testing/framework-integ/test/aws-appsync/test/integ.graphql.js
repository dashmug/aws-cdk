"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
/*
 * Creates an Appsync GraphQL API and with multiple tables.
 * Testing for importing, querying, and mutability.
 *
 * Stack verification steps:
 * Add to a table through appsync GraphQL API.
 * Read from a table through appsync API.
 *
 * -- aws appsync list-graphql-apis                 -- obtain apiId               --
 * -- aws appsync get-graphql-api --api-id [apiId]  -- obtain GraphQL endpoint    --
 * -- aws appsync list-api-keys --api-id [apiId]    -- obtain api key             --
 * -- bash verify.integ.graphql.sh [apiKey] [url]   -- shows query and mutation   --
 */
const app = new aws_cdk_lib_1.App();
const stack = new aws_cdk_lib_1.Stack(app, 'aws-appsync-integ');
const userPool = new aws_cognito_1.UserPool(stack, 'Pool', {
    userPoolName: 'myPool',
});
const api = new aws_appsync_1.GraphqlApi(stack, 'Api', {
    name: 'demoapi',
    schema: aws_appsync_1.SchemaFile.fromAsset(path_1.join(__dirname, 'integ.graphql.graphql')),
    authorizationConfig: {
        defaultAuthorization: {
            authorizationType: aws_appsync_1.AuthorizationType.USER_POOL,
            userPoolConfig: {
                userPool,
            },
        },
        additionalAuthorizationModes: [
            {
                authorizationType: aws_appsync_1.AuthorizationType.API_KEY,
            },
        ],
    },
});
const noneDS = api.addNoneDataSource('none', { name: 'None' });
noneDS.createResolver('QuerygetServiceVersion', {
    typeName: 'Query',
    fieldName: 'getServiceVersion',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.fromString(JSON.stringify({
        version: '2017-02-28',
    })),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.fromString(JSON.stringify({
        version: 'v1',
    })),
});
const customerTable = new aws_dynamodb_1.Table(stack, 'CustomerTable', {
    billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
    partitionKey: {
        name: 'id',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
});
const orderTable = new aws_dynamodb_1.Table(stack, 'OrderTable', {
    billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
    partitionKey: {
        name: 'customer',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
    sortKey: {
        name: 'order',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
});
orderTable.addGlobalSecondaryIndex({
    indexName: 'orderIndex',
    partitionKey: {
        name: 'order',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
    sortKey: {
        name: 'customer',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
});
new aws_dynamodb_1.Table(stack, 'PaymentTable', {
    billingMode: aws_dynamodb_1.BillingMode.PAY_PER_REQUEST,
    partitionKey: {
        name: 'id',
        type: aws_dynamodb_1.AttributeType.STRING,
    },
    removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
});
const paymentTable = aws_dynamodb_1.Table.fromTableName(stack, 'ImportedPaymentTable', 'PaymentTable');
const customerDS = api.addDynamoDbDataSource('customerDs', customerTable, { name: 'Customer' });
const orderDS = api.addDynamoDbDataSource('orderDs', orderTable, { name: 'Order' });
const paymentDS = api.addDynamoDbDataSource('paymentDs', paymentTable, { name: 'Payment' });
customerDS.createResolver('QueryGetCustomers', {
    typeName: 'Query',
    fieldName: 'getCustomers',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbScanTable(),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
customerDS.createResolver('QueryGetCustomer', {
    typeName: 'Query',
    fieldName: 'getCustomer',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id'),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
customerDS.createResolver('QueryGetCusomtersNotConsistent', {
    typeName: 'Query',
    fieldName: 'getCustomersNotConsistent',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbScanTable(false),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
customerDS.createResolver('QueryGetCustomerNotConsistent', {
    typeName: 'Query',
    fieldName: 'getCustomerNotConsistent',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id', false),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
customerDS.createResolver('QueryGetCustomersConsistent', {
    typeName: 'Query',
    fieldName: 'getCustomersConsistent',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbScanTable(true),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
customerDS.createResolver('QueryGetCustomerConsistent', {
    typeName: 'Query',
    fieldName: 'getCustomerConsistent',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id', true),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
customerDS.createResolver('MutationAddCustomer', {
    typeName: 'Mutation',
    fieldName: 'addCustomer',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey.partition('id').auto(), aws_appsync_1.Values.projecting('customer')),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
customerDS.createResolver('MutationSaveCustomer', {
    typeName: 'Mutation',
    fieldName: 'saveCustomer',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey.partition('id').is('id'), aws_appsync_1.Values.projecting('customer')),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
customerDS.createResolver('MutationSaveCustomerWithFirstOrder', {
    typeName: 'Mutation',
    fieldName: 'saveCustomerWithFirstOrder',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey
        .partition('order').auto()
        .sort('customer').is('customer.id'), aws_appsync_1.Values
        .projecting('order')
        .attribute('referral').is('referral')),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
customerDS.createResolver('MutationRemoveCustomer', {
    typeName: 'Mutation',
    fieldName: 'removeCustomer',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbDeleteItem('id', 'id'),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
const ops = [
    { suffix: 'Eq', op: aws_appsync_1.KeyCondition.eq },
    { suffix: 'Lt', op: aws_appsync_1.KeyCondition.lt },
    { suffix: 'Le', op: aws_appsync_1.KeyCondition.le },
    { suffix: 'Gt', op: aws_appsync_1.KeyCondition.gt },
    { suffix: 'Ge', op: aws_appsync_1.KeyCondition.ge },
];
for (const { suffix, op } of ops) {
    orderDS.createResolver(`QueryGetCustomerOrders${suffix}`, {
        typeName: 'Query',
        fieldName: 'getCustomerOrders' + suffix,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(op('customer', 'customer')),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
    orderDS.createResolver(`QueryGetOrderCustomers${suffix}`, {
        typeName: 'Query',
        fieldName: 'getOrderCustomers' + suffix,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(op('order', 'order'), 'orderIndex'),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
}
for (const { suffix, op } of ops) {
    orderDS.createResolver(`QueryGetCustomerOrdersNotConsistent${suffix}`, {
        typeName: 'Query',
        fieldName: 'getCustomerOrdersNotConsistent' + suffix,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(op('customer', 'customer'), undefined, false),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
    orderDS.createResolver(`QueryGetOrderCustomersNotConsistent${suffix}`, {
        typeName: 'Query',
        fieldName: 'getOrderCustomersNotConsistent' + suffix,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(op('order', 'order'), 'orderIndex', false),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
}
for (const { suffix, op } of ops) {
    orderDS.createResolver(`QueryGetCustomerOrdersConsistent${suffix}`, {
        typeName: 'Query',
        fieldName: 'getCustomerOrdersConsistent' + suffix,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(op('customer', 'customer'), undefined, true),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
    orderDS.createResolver(`QueryGetOrderCustomersConsistent${suffix}`, {
        typeName: 'Query',
        fieldName: 'getOrderCustomersConsistent' + suffix,
        requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(op('order', 'order'), 'orderIndex', true),
        responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
    });
}
orderDS.createResolver('QueryGetCustomerOrdersFilter', {
    typeName: 'Query',
    fieldName: 'getCustomerOrdersFilter',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq('customer', 'customer').and(aws_appsync_1.KeyCondition.beginsWith('order', 'order'))),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
orderDS.createResolver('QueryGetCustomerOrdersBetween', {
    typeName: 'Query',
    fieldName: 'getCustomerOrdersBetween',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq('customer', 'customer').and(aws_appsync_1.KeyCondition.between('order', 'order1', 'order2'))),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
orderDS.createResolver('QueryGetOrderCustomersFilter', {
    typeName: 'Query',
    fieldName: 'getOrderCustomersFilter',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq('order', 'order').and(aws_appsync_1.KeyCondition.beginsWith('customer', 'customer'))),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
orderDS.createResolver('QueryGetOrderCustomersBetween', {
    typeName: 'Query',
    fieldName: 'getOrderCustomersBetween',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbQuery(aws_appsync_1.KeyCondition.eq('order', 'order').and(aws_appsync_1.KeyCondition.between('customer', 'customer1', 'customer2')), 'orderIndex'),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultList(),
});
paymentDS.createResolver('QueryGetPayment', {
    typeName: 'Query',
    fieldName: 'getPayment',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id'),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
paymentDS.createResolver('QueryGetPaymentConsistent', {
    typeName: 'Query',
    fieldName: 'getPaymentConsistent',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbGetItem('id', 'id', true),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
paymentDS.createResolver('MutationSavePayment', {
    typeName: 'Mutation',
    fieldName: 'savePayment',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbPutItem(aws_appsync_1.PrimaryKey.partition('id').auto(), aws_appsync_1.Values.projecting('payment')),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.dynamoDbResultItem(),
});
const httpDS = api.addHttpDataSource('ds', 'https://aws.amazon.com/', { name: 'http' });
httpDS.createResolver('MutationDoPostOnAws', {
    typeName: 'Mutation',
    fieldName: 'doPostOnAws',
    requestMappingTemplate: aws_appsync_1.MappingTemplate.fromString(`{
    "version": "2018-05-29",
    "method": "POST",
    # if full path is https://api.xxxxxxxxx.com/posts then resourcePath would be /posts
    "resourcePath": "/path/123",
    "params":{
        "body": $util.toJson($ctx.args),
        "headers":{
            "Content-Type": "application/json",
            "Authorization": "$ctx.request.headers.Authorization"
        }
    }
  }`),
    responseMappingTemplate: aws_appsync_1.MappingTemplate.fromString(`
    ## Raise a GraphQL field error in case of a datasource invocation error
    #if($ctx.error)
      $util.error($ctx.error.message, $ctx.error.type)
    #end
    ## if the response status code is not 200, then return an error. Else return the body **
    #if($ctx.result.statusCode == 200)
        ## If response is 200, return the body.
        $ctx.result.body
    #else
        ## If response is not 200, append the response to error block.
        $utils.appendError($ctx.result.body, "$ctx.result.statusCode")
    #end
  `),
});
app.synth();
//# sourceMappingURL=data:application/json;base64,